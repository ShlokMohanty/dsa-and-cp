1) elements stored iat non-contiguous memory locations and are linked to each other using pointers.
2) Data : stores the data value of the node.That is the information to be stored at teh current node
   Next Pointer: Pointer variable or any other variable which stores the address of the next node in teh 
   memory.
   A(Head)|Next --->  B|Next --> C|Next --> D|Next--> NULL
3) size of the linked list can be incremented or decremented instead of arrays during the runtime.
4) insertion and deletion are easy in a linked list as there is no shifting involved in that.

Disadvantages : 
1) Random Access is not allowed in linked lists.We have to access elements sequentially starting 
from the first node.
2) Extra memory space for a pointer is required with each element of the list.
3) Not cache friendly.

representing a node using structure 
struct Node
{
int data;
struct Node* next;
}
//constructor to create a new node 
//next is by default initialized 
// as NULL 
Node(int d)
{
data = d;
}
}

 what does this means , ListNode() : val(0), next(nullptr) {}?
 answer: it is a constructor (ListNode(5)): it will set parameter val to 5, and next to null 
 example :
 struct my_struct{
 int a;
 int b;
 my_struct(int x,int y): a(x), b(y) {}
 };
 int main(){
 my_struct st(2,5);
 cout<< st.a<<" "<<st.b<<endl;
 return 0;
 
 }
 }
 
